struct VertexInput {
    @location(0) position: vec3<f32>,
    @location(1) location: vec2<f32>,
};
struct VertexOutput {
    @builtin(position) clip_position : vec4 <f32>,
    @location(0) location : vec2 <f32>
};

@group(0) @binding(0)
var<uniform> transform : mat3x3<f32>;


@group(1) @binding(0)
var<uniform> resolution : vec2<f32>;

@group(3) @binding(0)
var<uniform> color : vec4<f32>;

@group(2) @binding(0)
var diffuse_texture: texture_2d<f32>;

@group(2) @binding(1)
var diffuse_sampler: sampler;

@vertex
fn vs_main(
model : VertexInput,
) -> VertexOutput {
    var out : VertexOutput;
    out.clip_position =vec4<f32>(model.position, 1.0);
    return out;
}

@fragment
fn fs_main(in: VertexOutput) -> @location(0) vec4<f32> {
    var final_color = vec4<f32>(0.0, 0.0, 0.0, 1.0);

    return final_color;
}

