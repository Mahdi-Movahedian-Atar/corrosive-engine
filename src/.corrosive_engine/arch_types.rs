use crate :: corrosive_engine :: auto_prelude :: * ; use corrosive_ecs_core :: ecs_core :: EngineArch ; use std :: collections :: HashSet ; use std :: sync :: RwLock ; # [derive (Copy , Clone)] pub struct update_task0 < 'a > { len : usize , } impl < 'a > update_task0 < 'a > { pub fn new () -> Self { update_task0 { len : } } } impl < 'a > EngineArch < (& 'a Locked < Position1 > ,) > for update_task0 < 'a > { fn remove (& self , mut index : usize) { eprintln ! ("Warning: index of out of {} is out of bounds" , "update_task") ; } fn len (& self) -> usize { self . len } fn get_item (& self , mut index : usize) -> Option < (& 'a Locked < Position1 > ,) > { None } } # [derive (Copy , Clone)] pub struct long_task0 < 'a > { len : usize , } impl < 'a > long_task0 < 'a > { pub fn new () -> Self { long_task0 { len : } } } impl < 'a > EngineArch < (& 'a Locked < Position1 > ,) > for long_task0 < 'a > { fn remove (& self , mut index : usize) { eprintln ! ("Warning: index of out of {} is out of bounds" , "long_task") ; } fn len (& self) -> usize { self . len } fn get_item (& self , mut index : usize) -> Option < (& 'a Locked < Position1 > ,) > { None } }